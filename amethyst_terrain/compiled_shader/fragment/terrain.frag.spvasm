; SPIR-V
; Version: 1.0
; Generator: Google Shaderc over Glslang; 7
; Bound: 1055
; Schema: 0
               OpCapability Shader
          %2 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %vertex %fragColor
               OpExecutionMode %main OriginUpperLeft
          %1 = OpString "shader/fragment/terrain.frag"
               OpSource GLSL 450 %1 "// OpModuleProcessed entry-point main
// OpModuleProcessed client vulkan100
// OpModuleProcessed target-env vulkan1.0
// OpModuleProcessed entry-point main
#line 1
#version 450

// Inputs
layout(location = 0) in VertexData {
    vec3 position;
    vec3 normal;
    vec3 tangent;
    vec2 tex_coord;
    vec4 color;
} vertex;

// Uniforms
// Set 0 Env
// Set 1 Terrain
struct PointLight {
    vec3 position;
    vec3 color;
    float intensity;
};

struct DirectionalLight {
    vec3 color;
    float intensity;
    vec3 direction;
};

struct SpotLight {
    vec3 position;
    vec3 color;
    vec3 direction;
    float angle;
    float intensity;
    float range;
    float smoothness;
};

layout(std140, set = 0, binding = 1) uniform Environment {
    vec3 ambient_color;
    vec3 camera_position; 
    int point_light_count;
    int directional_light_count;
    int spot_light_count;
};

layout(std140, set = 0, binding = 2) uniform PointLights {
    PointLight plight[128];
};

layout(std140, set = 0, binding = 3) uniform DirectionalLights {
    DirectionalLight dlight[16];
};

layout(std140, set = 0, binding = 4) uniform SpotLights {
    SpotLight slight[128];
};




layout (std140, set = 1, binding = 0) uniform TerrainArgs {
    mat4 model;
    ivec2 terrain_size;
    float terrain_height_scale;
    float terrain_height_offset;
    bool wireframe;
};

layout(set = 1, binding = 1) uniform sampler2D terrain_height_tex;
layout(set = 1, binding = 2) uniform sampler2D normal;
layout(set = 1, binding = 3) uniform sampler2D albedo;

// layout(set = 2, binding = 4) uniform float toggle_wireframe;
// layout(location = 0) uniform float patch_scale;


// Ouputs
layout(location = 0) out vec4 fragColor;

const float PI = 3.14159265359;

float tex_coord(float coord, vec2 offset) {
    return offset.x + coord * (offset.y - offset.x);
}

vec2 tex_coords(vec2 coord, vec2 u, vec2 v) {
    return vec2(tex_coord(coord.x, u), tex_coord(coord.y, v));
}
float normal_distribution(vec3 N, vec3 H, float a) {
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return (a2 + 0.0000001) / denom;
}

float geometry(float NdotV, float NdotL, float r2) {
    float a1 = r2 + 1.0;
    float k = a1 * a1 / 8.0;
    float denom = NdotV * (1.0 - k) + k;
    float ggx1 = NdotV / denom;
    denom = NdotL * (1.0 - k) + k;
    float ggx2 = NdotL / denom;
    return ggx1 * ggx2;
}

vec3 fresnel(float HdotV, vec3 fresnel_base) {
    return fresnel_base + (1.0 - fresnel_base) * pow(1.0 - HdotV, 5.0);
}

vec3 compute_light(vec3 attenuation,
                   vec3 light_color,
                   vec3 view_direction,
                   vec3 light_direction,
                   vec3 albedo,
                   vec3 normal,
                   float roughness2,
                   float metallic,
                   vec3 fresnel_base) {

    vec3 halfway = normalize(view_direction + light_direction);
    float normal_distribution = normal_distribution(normal, halfway, roughness2);

    float NdotV = max(dot(normal, view_direction), 0.0);
    float NdotL = max(dot(normal, light_direction), 0.0);
    float HdotV = max(dot(halfway, view_direction), 0.0);
    float geometry = geometry(NdotV, NdotL, roughness2);

    vec3 fresnel = fresnel(HdotV, fresnel_base);
    vec3 diffuse = vec3(1.0) - fresnel;
    diffuse *= 1.0 - metallic;

    vec3 nominator = normal_distribution * geometry * fresnel;
    float denominator = 4 * NdotV * NdotL + 0.0001;
    vec3 specular = nominator / denominator;

    vec3 resulting_light = (diffuse * albedo / PI + specular) * light_color * attenuation * NdotL;
    return resulting_light;
}

void main()
{
    vec4 albedo_alpha       = texture(albedo, vertex.tex_coord);

    float alpha             = albedo_alpha.a;
    // if(alpha < 1.0) discard;t

    vec3 albedo             = albedo_alpha.rgb;
    vec3 normal = texture(normal, vertex.tex_coord).rgb;
    float metallic = 0.0;
    float roughness = 1.0;

    // normal conversion
    normal = normal * 2 - 1;

    float roughness2 = roughness * roughness;
    vec3 fresnel_base = mix(vec3(0.04), albedo, metallic);

    vec3 vertex_normal = normalize(vertex.normal);
    vec3 vertex_tangent = normalize(vertex.tangent - vertex_normal * dot(vertex_normal, vertex.tangent));
    vec3 vertex_bitangent = normalize(cross(vertex_normal, vertex_tangent));
    mat3 vertex_basis = mat3(vertex_tangent, vertex_bitangent, vertex_normal);
    normal = normalize(vertex_basis * normal);


    vec3 view_direction = normalize(camera_position - vertex.position);

    vec3 lighting = vec3(0.0);
    for (uint i = 0u; i < point_light_count; i++) {
        vec3 unnormalizedLightVector = (plight[i].position - vertex.position);
        vec3 light_direction = normalize(unnormalizedLightVector);
        float attenuation = plight[i].intensity / dot(unnormalizedLightVector, unnormalizedLightVector);

        vec3 light = compute_light(vec3(attenuation),
                                   plight[i].color,
                                   view_direction,
                                   light_direction,
                                   albedo,
                                   normal,
                                   roughness2,
                                   metallic,
                                   fresnel_base);


        lighting += light;
    }

    for (uint i = 0u; i < directional_light_count; i++) {
        vec3 light_direction = -normalize(dlight[i].direction);
        float attenuation = dlight[i].intensity;

        vec3 light = compute_light(vec3(attenuation),
                                   dlight[i].color,
                                   view_direction,
                                   light_direction,
                                   albedo,
                                   normal,
                                   roughness2,
                                   metallic,
                                   fresnel_base);
        lighting += light;
    }

    for (int i = 0; i < spot_light_count; i++) {
        vec3 light_vec = slight[i].position - vertex.position;
        vec3 normalized_light_vec = normalize(light_vec);

        // The distance between the current fragment and the \"core\" of the light
        float light_length = length(light_vec);

        // The allowed \"length\", everything after this won't be lit.
        // Later on we are dividing by this range, so it can't be 0
        float range = max(slight[i].range, 0.00001);

        // get normalized range, so everything 0..1 could be lit, everything else can't.
        float normalized_range = light_length / max(0.00001, range);

        // The attenuation for the \"range\". If we would only consider this, we'd have a
        // point light instead, so we need to also check for the spot angle and direction.
        float range_attenuation = max(0.0, 1.0 - normalized_range);

        // this is actually the cosine of the angle, so it can be compared with the
        // \"dotted\" frag_angle below a lot cheaper.
        float spot_angle = max(slight[i].angle, 0.00001);
        vec3 spot_direction = normalize(slight[i].direction);
        float smoothness = 1.0 - slight[i].smoothness;

        // Here we check if the current fragment is within the \"ring\" of the spotlight.
        float frag_angle = dot(spot_direction, -normalized_light_vec);

        // so that the ring_attenuation won't be > 1
        frag_angle = max(frag_angle, spot_angle);

        // How much is this outside of the ring? (let's call it \"rim\")
        // Also smooth this out.
        float rim_attenuation = pow(max((1.0 - frag_angle) / (1.0 - spot_angle), 0.00001), smoothness);

        // How much is this inside the \"ring\"?
        float ring_attenuation = 1.0 - rim_attenuation;

        // combine the attenuations and intensity
        float attenuation = range_attenuation * ring_attenuation * slight[i].intensity;

        vec3 light = compute_light(vec3(attenuation),
                                   slight[i].color,
                                   view_direction,
                                   normalize(light_vec),
                                   albedo,
                                   normal,
                                   roughness2,
                                   metallic,
                                   fresnel_base);
        lighting += light;
    }



    vec3 ambient = ambient_color * albedo;
    vec3 color = ambient + lighting;


    fragColor = vec4(color, 1.0);
}"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %albedo "albedo"
               OpName %VertexData "VertexData"
               OpMemberName %VertexData 0 "position"
               OpMemberName %VertexData 1 "normal"
               OpMemberName %VertexData 2 "tangent"
               OpMemberName %VertexData 3 "tex_coord"
               OpMemberName %VertexData 4 "color"
               OpName %vertex "vertex"
               OpName %normal "normal"
               OpName %Environment "Environment"
               OpMemberName %Environment 0 "ambient_color"
               OpMemberName %Environment 1 "camera_position"
               OpMemberName %Environment 2 "point_light_count"
               OpMemberName %Environment 3 "directional_light_count"
               OpMemberName %Environment 4 "spot_light_count"
               OpName %_ ""
               OpName %PointLight "PointLight"
               OpMemberName %PointLight 0 "position"
               OpMemberName %PointLight 1 "color"
               OpMemberName %PointLight 2 "intensity"
               OpName %PointLights "PointLights"
               OpMemberName %PointLights 0 "plight"
               OpName %__0 ""
               OpName %DirectionalLight "DirectionalLight"
               OpMemberName %DirectionalLight 0 "color"
               OpMemberName %DirectionalLight 1 "intensity"
               OpMemberName %DirectionalLight 2 "direction"
               OpName %DirectionalLights "DirectionalLights"
               OpMemberName %DirectionalLights 0 "dlight"
               OpName %__1 ""
               OpName %SpotLight "SpotLight"
               OpMemberName %SpotLight 0 "position"
               OpMemberName %SpotLight 1 "color"
               OpMemberName %SpotLight 2 "direction"
               OpMemberName %SpotLight 3 "angle"
               OpMemberName %SpotLight 4 "intensity"
               OpMemberName %SpotLight 5 "range"
               OpMemberName %SpotLight 6 "smoothness"
               OpName %SpotLights "SpotLights"
               OpMemberName %SpotLights 0 "slight"
               OpName %__2 ""
               OpName %fragColor "fragColor"
               OpDecorate %albedo DescriptorSet 1
               OpDecorate %albedo Binding 3
               OpDecorate %VertexData Block
               OpDecorate %vertex Location 0
               OpDecorate %normal DescriptorSet 1
               OpDecorate %normal Binding 2
               OpMemberDecorate %Environment 0 Offset 0
               OpMemberDecorate %Environment 1 Offset 16
               OpMemberDecorate %Environment 2 Offset 28
               OpMemberDecorate %Environment 3 Offset 32
               OpMemberDecorate %Environment 4 Offset 36
               OpDecorate %Environment Block
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_ Binding 1
               OpMemberDecorate %PointLight 0 Offset 0
               OpMemberDecorate %PointLight 1 Offset 16
               OpMemberDecorate %PointLight 2 Offset 28
               OpDecorate %_arr_PointLight_uint_128 ArrayStride 32
               OpMemberDecorate %PointLights 0 Offset 0
               OpDecorate %PointLights Block
               OpDecorate %__0 DescriptorSet 0
               OpDecorate %__0 Binding 2
               OpMemberDecorate %DirectionalLight 0 Offset 0
               OpMemberDecorate %DirectionalLight 1 Offset 12
               OpMemberDecorate %DirectionalLight 2 Offset 16
               OpDecorate %_arr_DirectionalLight_uint_16 ArrayStride 32
               OpMemberDecorate %DirectionalLights 0 Offset 0
               OpDecorate %DirectionalLights Block
               OpDecorate %__1 DescriptorSet 0
               OpDecorate %__1 Binding 3
               OpMemberDecorate %SpotLight 0 Offset 0
               OpMemberDecorate %SpotLight 1 Offset 16
               OpMemberDecorate %SpotLight 2 Offset 32
               OpMemberDecorate %SpotLight 3 Offset 44
               OpMemberDecorate %SpotLight 4 Offset 48
               OpMemberDecorate %SpotLight 5 Offset 52
               OpMemberDecorate %SpotLight 6 Offset 56
               OpDecorate %_arr_SpotLight_uint_128 ArrayStride 64
               OpMemberDecorate %SpotLights 0 Offset 0
               OpDecorate %SpotLights Block
               OpDecorate %__2 DescriptorSet 0
               OpDecorate %__2 Binding 4
               OpDecorate %fragColor Location 0
       %void = OpTypeVoid
          %4 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v3float = OpTypeVector %float 3
    %float_0 = OpConstant %float 0
    %float_1 = OpConstant %float 1
    %float_5 = OpConstant %float 5
        %163 = OpConstantComposite %v3float %float_1 %float_1 %float_1
    %float_4 = OpConstant %float 4
%float_9_99999975en05 = OpConstant %float 9.99999975e-05
    %v4float = OpTypeVector %float 4
        %209 = OpTypeImage %float 2D 0 0 0 1 Unknown
        %210 = OpTypeSampledImage %209
%_ptr_UniformConstant_210 = OpTypePointer UniformConstant %210
     %albedo = OpVariable %_ptr_UniformConstant_210 UniformConstant
    %v2float = OpTypeVector %float 2
 %VertexData = OpTypeStruct %v3float %v3float %v3float %v2float %v4float
%_ptr_Input_VertexData = OpTypePointer Input %VertexData
     %vertex = OpVariable %_ptr_Input_VertexData Input
        %int = OpTypeInt 32 1
      %int_3 = OpConstant %int 3
%_ptr_Input_v2float = OpTypePointer Input %v2float
       %uint = OpTypeInt 32 0
     %normal = OpVariable %_ptr_UniformConstant_210 UniformConstant
    %float_2 = OpConstant %float 2
%float_0_0399999991 = OpConstant %float 0.0399999991
        %252 = OpConstantComposite %v3float %float_0_0399999991 %float_0_0399999991 %float_0_0399999991
      %int_1 = OpConstant %int 1
%_ptr_Input_v3float = OpTypePointer Input %v3float
      %int_2 = OpConstant %int 2
%mat3v3float = OpTypeMatrix %v3float 3
%Environment = OpTypeStruct %v3float %v3float %int %int %int
%_ptr_Uniform_Environment = OpTypePointer Uniform %Environment
          %_ = OpVariable %_ptr_Uniform_Environment Uniform
%_ptr_Uniform_v3float = OpTypePointer Uniform %v3float
      %int_0 = OpConstant %int 0
        %316 = OpConstantComposite %v3float %float_0 %float_0 %float_0
     %uint_0 = OpConstant %uint 0
%_ptr_Uniform_int = OpTypePointer Uniform %int
       %bool = OpTypeBool
 %PointLight = OpTypeStruct %v3float %v3float %float
   %uint_128 = OpConstant %uint 128
%_arr_PointLight_uint_128 = OpTypeArray %PointLight %uint_128
%PointLights = OpTypeStruct %_arr_PointLight_uint_128
%_ptr_Uniform_PointLights = OpTypePointer Uniform %PointLights
        %__0 = OpVariable %_ptr_Uniform_PointLights Uniform
%_ptr_Uniform_float = OpTypePointer Uniform %float
%DirectionalLight = OpTypeStruct %v3float %float %v3float
    %uint_16 = OpConstant %uint 16
%_arr_DirectionalLight_uint_16 = OpTypeArray %DirectionalLight %uint_16
%DirectionalLights = OpTypeStruct %_arr_DirectionalLight_uint_16
%_ptr_Uniform_DirectionalLights = OpTypePointer Uniform %DirectionalLights
        %__1 = OpVariable %_ptr_Uniform_DirectionalLights Uniform
      %int_4 = OpConstant %int 4
  %SpotLight = OpTypeStruct %v3float %v3float %v3float %float %float %float %float
%_arr_SpotLight_uint_128 = OpTypeArray %SpotLight %uint_128
 %SpotLights = OpTypeStruct %_arr_SpotLight_uint_128
%_ptr_Uniform_SpotLights = OpTypePointer Uniform %SpotLights
        %__2 = OpVariable %_ptr_Uniform_SpotLights Uniform
      %int_5 = OpConstant %int 5
%float_9_99999975en06 = OpConstant %float 9.99999975e-06
      %int_6 = OpConstant %int 6
%_ptr_Output_v4float = OpTypePointer Output %v4float
  %fragColor = OpVariable %_ptr_Output_v4float Output
  %float_0_5 = OpConstant %float 0.5
%float_0_318309903 = OpConstant %float 0.318309903
%float_0_959999979 = OpConstant %float 0.959999979
       %1052 = OpConstantComposite %v3float %float_0_959999979 %float_0_959999979 %float_0_959999979
%float_0_318309873 = OpConstant %float 0.318309873
       %1054 = OpConstantComposite %v3float %float_0_318309873 %float_0_318309873 %float_0_318309873
       %main = OpFunction %void None %4
          %6 = OpLabel
               OpLine %1 145 0
        %213 = OpLoad %210 %albedo
        %221 = OpAccessChain %_ptr_Input_v2float %vertex %int_3
        %222 = OpLoad %v2float %221
        %223 = OpImageSampleImplicitLod %v4float %213 %222
        %231 = OpVectorShuffle %v3float %223 %223 0 1 2
               OpLine %1 151 0
        %234 = OpLoad %210 %normal
        %237 = OpImageSampleImplicitLod %v4float %234 %222
        %238 = OpVectorShuffle %v3float %237 %237 0 1 2
        %243 = OpVectorTimesScalar %v3float %238 %float_2
        %245 = OpFSub %v3float %243 %163
               OpLine %1 161 0
        %260 = OpAccessChain %_ptr_Input_v3float %vertex %int_1
        %261 = OpLoad %v3float %260
        %262 = OpExtInst %v3float %2 Normalize %261
               OpLine %1 162 0
        %265 = OpAccessChain %_ptr_Input_v3float %vertex %int_2
        %266 = OpLoad %v3float %265
        %271 = OpDot %float %262 %266
        %272 = OpVectorTimesScalar %v3float %262 %271
        %273 = OpFSub %v3float %266 %272
        %274 = OpExtInst %v3float %2 Normalize %273
        %278 = OpExtInst %v3float %2 Cross %262 %274
        %279 = OpExtInst %v3float %2 Normalize %278
        %298 = OpCompositeConstruct %mat3v3float %274 %279 %262
        %301 = OpMatrixTimesVector %v3float %298 %245
        %302 = OpExtInst %v3float %2 Normalize %301
               OpLine %1 168 0
        %308 = OpAccessChain %_ptr_Uniform_v3float %_ %int_1
        %309 = OpLoad %v3float %308
        %311 = OpAccessChain %_ptr_Input_v3float %vertex %int_0
        %312 = OpLoad %v3float %311
        %313 = OpFSub %v3float %309 %312
        %314 = OpExtInst %v3float %2 Normalize %313
               OpBranch %320
        %320 = OpLabel
       %1045 = OpPhi %v3float %316 %6 %382 %321
       %1040 = OpPhi %uint %uint_0 %6 %384 %321
        %327 = OpAccessChain %_ptr_Uniform_int %_ %int_2
        %328 = OpLoad %int %327
        %329 = OpBitcast %uint %328
        %331 = OpULessThan %bool %1040 %329
               OpLoopMerge %322 %321 None
               OpBranchConditional %331 %321 %322
        %321 = OpLabel
        %340 = OpAccessChain %_ptr_Uniform_v3float %__0 %int_0 %1040 %int_0
        %341 = OpLoad %v3float %340
        %344 = OpFSub %v3float %341 %312
        %347 = OpExtInst %v3float %2 Normalize %344
        %351 = OpAccessChain %_ptr_Uniform_float %__0 %int_0 %1040 %int_2
        %352 = OpLoad %float %351
        %355 = OpDot %float %344 %344
        %356 = OpFDiv %float %352 %355
        %359 = OpCompositeConstruct %v3float %356 %356 %356
        %363 = OpAccessChain %_ptr_Uniform_v3float %__0 %int_0 %1040 %int_1
        %364 = OpLoad %v3float %363
        %604 = OpFAdd %v3float %314 %347
        %605 = OpExtInst %v3float %2 Normalize %604
        %612 = OpDot %float %302 %314
        %613 = OpExtInst %float %2 FMax %612 %float_0
        %616 = OpDot %float %302 %347
        %617 = OpExtInst %float %2 FMax %616 %float_0
        %620 = OpDot %float %605 %314
        %621 = OpExtInst %float %2 FMax %620 %float_0
        %706 = OpFMul %float %613 %float_0_5
        %708 = OpFAdd %float %706 %float_0_5
        %711 = OpFDiv %float %613 %708
        %715 = OpFMul %float %617 %float_0_5
        %717 = OpFAdd %float %715 %float_0_5
        %720 = OpFDiv %float %617 %717
        %723 = OpFMul %float %711 %720
        %730 = OpFSub %float %float_1 %621
        %731 = OpExtInst %float %2 Pow %730 %float_5
        %732 = OpVectorTimesScalar %v3float %1052 %731
        %733 = OpFAdd %v3float %252 %732
        %630 = OpFSub %v3float %1052 %732
        %634 = OpVectorTimesScalar %v3float %630 %float_1
        %637 = OpFMul %float %float_0_318309903 %723
        %639 = OpVectorTimesScalar %v3float %733 %637
        %641 = OpFMul %float %float_4 %613
        %643 = OpFMul %float %641 %617
        %644 = OpFAdd %float %643 %float_9_99999975en05
        %647 = OpCompositeConstruct %v3float %644 %644 %644
        %648 = OpFDiv %v3float %639 %647
        %651 = OpFMul %v3float %634 %231
        %653 = OpFMul %v3float %651 %1054
        %655 = OpFAdd %v3float %653 %648
        %657 = OpFMul %v3float %655 %364
        %659 = OpFMul %v3float %657 %359
        %661 = OpVectorTimesScalar %v3float %659 %617
        %382 = OpFAdd %v3float %1045 %661
        %384 = OpIAdd %uint %1040 %int_1
               OpBranch %320
        %322 = OpLabel
               OpBranch %386
        %386 = OpLabel
       %1044 = OpPhi %v3float %1045 %322 %437 %387
       %1041 = OpPhi %uint %uint_0 %322 %439 %387
        %392 = OpAccessChain %_ptr_Uniform_int %_ %int_3
        %393 = OpLoad %int %392
        %394 = OpBitcast %uint %393
        %395 = OpULessThan %bool %1041 %394
               OpLoopMerge %388 %387 None
               OpBranchConditional %395 %387 %388
        %387 = OpLabel
        %404 = OpAccessChain %_ptr_Uniform_v3float %__1 %int_0 %1041 %int_2
        %405 = OpLoad %v3float %404
        %406 = OpExtInst %v3float %2 Normalize %405
        %407 = OpFNegate %v3float %406
        %410 = OpAccessChain %_ptr_Uniform_float %__1 %int_0 %1041 %int_1
        %411 = OpLoad %float %410
        %414 = OpCompositeConstruct %v3float %411 %411 %411
        %418 = OpAccessChain %_ptr_Uniform_v3float %__1 %int_0 %1041 %int_0
        %419 = OpLoad %v3float %418
        %757 = OpFAdd %v3float %314 %407
        %758 = OpExtInst %v3float %2 Normalize %757
        %765 = OpDot %float %302 %314
        %766 = OpExtInst %float %2 FMax %765 %float_0
        %769 = OpDot %float %302 %407
        %770 = OpExtInst %float %2 FMax %769 %float_0
        %773 = OpDot %float %758 %314
        %774 = OpExtInst %float %2 FMax %773 %float_0
        %859 = OpFMul %float %766 %float_0_5
        %861 = OpFAdd %float %859 %float_0_5
        %864 = OpFDiv %float %766 %861
        %868 = OpFMul %float %770 %float_0_5
        %870 = OpFAdd %float %868 %float_0_5
        %873 = OpFDiv %float %770 %870
        %876 = OpFMul %float %864 %873
        %883 = OpFSub %float %float_1 %774
        %884 = OpExtInst %float %2 Pow %883 %float_5
        %885 = OpVectorTimesScalar %v3float %1052 %884
        %886 = OpFAdd %v3float %252 %885
        %783 = OpFSub %v3float %1052 %885
        %787 = OpVectorTimesScalar %v3float %783 %float_1
        %790 = OpFMul %float %float_0_318309903 %876
        %792 = OpVectorTimesScalar %v3float %886 %790
        %794 = OpFMul %float %float_4 %766
        %796 = OpFMul %float %794 %770
        %797 = OpFAdd %float %796 %float_9_99999975en05
        %800 = OpCompositeConstruct %v3float %797 %797 %797
        %801 = OpFDiv %v3float %792 %800
        %804 = OpFMul %v3float %787 %231
        %806 = OpFMul %v3float %804 %1054
        %808 = OpFAdd %v3float %806 %801
        %810 = OpFMul %v3float %808 %419
        %812 = OpFMul %v3float %810 %414
        %814 = OpVectorTimesScalar %v3float %812 %770
        %437 = OpFAdd %v3float %1044 %814
        %439 = OpIAdd %uint %1041 %int_1
               OpBranch %386
        %388 = OpLabel
               OpBranch %442
        %442 = OpLabel
       %1043 = OpPhi %v3float %1044 %388 %556 %443
       %1042 = OpPhi %int %int_0 %388 %558 %443
        %449 = OpAccessChain %_ptr_Uniform_int %_ %int_4
        %450 = OpLoad %int %449
        %451 = OpSLessThan %bool %1042 %450
               OpLoopMerge %444 %443 None
               OpBranchConditional %451 %443 %444
        %443 = OpLabel
        %459 = OpAccessChain %_ptr_Uniform_v3float %__2 %int_0 %1042 %int_0
        %460 = OpLoad %v3float %459
        %463 = OpFSub %v3float %460 %312
        %466 = OpExtInst %v3float %2 Normalize %463
        %469 = OpExtInst %float %2 Length %463
        %473 = OpAccessChain %_ptr_Uniform_float %__2 %int_0 %1042 %int_5
        %474 = OpLoad %float %473
        %476 = OpExtInst %float %2 FMax %474 %float_9_99999975en06
        %480 = OpExtInst %float %2 FMax %float_9_99999975en06 %476
        %481 = OpFDiv %float %469 %480
        %484 = OpFSub %float %float_1 %481
        %485 = OpExtInst %float %2 FMax %float_0 %484
        %488 = OpAccessChain %_ptr_Uniform_float %__2 %int_0 %1042 %int_3
        %489 = OpLoad %float %488
        %490 = OpExtInst %float %2 FMax %489 %float_9_99999975en06
        %493 = OpAccessChain %_ptr_Uniform_v3float %__2 %int_0 %1042 %int_2
        %494 = OpLoad %v3float %493
        %495 = OpExtInst %v3float %2 Normalize %494
        %499 = OpAccessChain %_ptr_Uniform_float %__2 %int_0 %1042 %int_6
        %500 = OpLoad %float %499
        %501 = OpFSub %float %float_1 %500
        %505 = OpFNegate %v3float %466
        %506 = OpDot %float %495 %505
        %509 = OpExtInst %float %2 FMax %506 %490
        %512 = OpFSub %float %float_1 %509
        %514 = OpFSub %float %float_1 %490
        %515 = OpFDiv %float %512 %514
        %516 = OpExtInst %float %2 FMax %515 %float_9_99999975en06
        %518 = OpExtInst %float %2 Pow %516 %501
        %521 = OpFSub %float %float_1 %518
        %525 = OpFMul %float %485 %521
        %527 = OpAccessChain %_ptr_Uniform_float %__2 %int_0 %1042 %int_4
        %528 = OpLoad %float %527
        %529 = OpFMul %float %525 %528
        %532 = OpCompositeConstruct %v3float %529 %529 %529
        %538 = OpAccessChain %_ptr_Uniform_v3float %__2 %int_0 %1042 %int_1
        %539 = OpLoad %v3float %538
        %910 = OpFAdd %v3float %314 %466
        %911 = OpExtInst %v3float %2 Normalize %910
        %918 = OpDot %float %302 %314
        %919 = OpExtInst %float %2 FMax %918 %float_0
        %922 = OpDot %float %302 %466
        %923 = OpExtInst %float %2 FMax %922 %float_0
        %926 = OpDot %float %911 %314
        %927 = OpExtInst %float %2 FMax %926 %float_0
       %1012 = OpFMul %float %919 %float_0_5
       %1014 = OpFAdd %float %1012 %float_0_5
       %1017 = OpFDiv %float %919 %1014
       %1021 = OpFMul %float %923 %float_0_5
       %1023 = OpFAdd %float %1021 %float_0_5
       %1026 = OpFDiv %float %923 %1023
       %1029 = OpFMul %float %1017 %1026
       %1036 = OpFSub %float %float_1 %927
       %1037 = OpExtInst %float %2 Pow %1036 %float_5
       %1038 = OpVectorTimesScalar %v3float %1052 %1037
       %1039 = OpFAdd %v3float %252 %1038
        %936 = OpFSub %v3float %1052 %1038
        %940 = OpVectorTimesScalar %v3float %936 %float_1
        %943 = OpFMul %float %float_0_318309903 %1029
        %945 = OpVectorTimesScalar %v3float %1039 %943
        %947 = OpFMul %float %float_4 %919
        %949 = OpFMul %float %947 %923
        %950 = OpFAdd %float %949 %float_9_99999975en05
        %953 = OpCompositeConstruct %v3float %950 %950 %950
        %954 = OpFDiv %v3float %945 %953
        %957 = OpFMul %v3float %940 %231
        %959 = OpFMul %v3float %957 %1054
        %961 = OpFAdd %v3float %959 %954
        %963 = OpFMul %v3float %961 %539
        %965 = OpFMul %v3float %963 %532
        %967 = OpVectorTimesScalar %v3float %965 %923
        %556 = OpFAdd %v3float %1043 %967
        %558 = OpIAdd %int %1042 %int_1
               OpBranch %442
        %444 = OpLabel
               OpLine %1 260 0
        %560 = OpAccessChain %_ptr_Uniform_v3float %_ %int_0
        %561 = OpLoad %v3float %560
        %563 = OpFMul %v3float %561 %231
        %567 = OpFAdd %v3float %563 %1043
        %571 = OpCompositeExtract %float %567 0
        %572 = OpCompositeExtract %float %567 1
        %573 = OpCompositeExtract %float %567 2
        %574 = OpCompositeConstruct %v4float %571 %572 %573 %float_1
               OpStore %fragColor %574
               OpReturn
               OpFunctionEnd
