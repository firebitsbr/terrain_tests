; SPIR-V
; Version: 1.0
; Generator: Google Shaderc over Glslang; 7
; Bound: 590
; Schema: 0
               OpCapability Shader
          %2 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint Fragment %main "main" %vertex %edge_dist %fragColor
               OpExecutionMode %main OriginUpperLeft
          %1 = OpString "shader/fragment/terrain_debug.frag"
               OpSource GLSL 450 %1 "// OpModuleProcessed entry-point main
// OpModuleProcessed client vulkan100
// OpModuleProcessed target-env vulkan1.0
// OpModuleProcessed entry-point main
#line 1
#version 450

// Inputs
// layout(location = 0) in vec3 inNormal;
// layout(location = 1) in vec2 inUV;
// layout(location = 2) in vec3 inViewVec;
// layout(location = 3) in vec3 inWorldPos;
// layout(location = 4) in vec4 wire_color;
// layout(location = 5) noperspective in vec3 edge_dist;
layout(location = 0) in VertexData {
    vec3 position;
    vec3 normal;
    vec2 tex_coord;
    vec4 color;
} vertex;
layout(location = 4) noperspective in vec3 edge_dist;

// Uniforms
// Set 0 Env
// Set 1 Terrain
struct PointLight {
    vec3 position;
    vec3 color;
    float intensity;
};

struct DirectionalLight {
    vec3 color;
    float intensity;
    vec3 direction;
};

struct SpotLight {
    vec3 position;
    vec3 color;
    vec3 direction;
    float angle;
    float intensity;
    float range;
    float smoothness;
};

layout(std140, set = 0, binding = 1) uniform Environment {
    vec3 ambient_color;
    vec3 camera_position; 
    int point_light_count;
    int directional_light_count;
    int spot_light_count;
};

layout(std140, set = 0, binding = 2) uniform PointLights {
    PointLight plight[128];
};

layout(std140, set = 0, binding = 3) uniform DirectionalLights {
    DirectionalLight dlight[16];
};

layout(std140, set = 0, binding = 4) uniform SpotLights {
    SpotLight slight[128];
};




layout (std140, set = 1, binding = 0) uniform TerrainArgs {
    mat4 model;
    ivec2 terrain_size;
    float terrain_height_scale;
    float terrain_height_offset;
    bool wireframe;
};

layout(set = 1, binding = 1) uniform sampler2D terrain_height_tex;
layout(set = 1, binding = 2) uniform sampler2D normal;
layout(set = 1, binding = 3) uniform sampler2D albedo;

// layout(set = 2, binding = 4) uniform float toggle_wireframe;
// layout(location = 0) uniform float patch_scale;


// Ouputs
layout(location = 0) out vec4 fragColor;

const float PI = 3.14159265359;

float tex_coord(float coord, vec2 offset) {
    return offset.x + coord * (offset.y - offset.x);
}

vec2 tex_coords(vec2 coord, vec2 u, vec2 v) {
    return vec2(tex_coord(coord.x, u), tex_coord(coord.y, v));
}
float normal_distribution(vec3 N, vec3 H, float a) {
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return (a2 + 0.0000001) / denom;
}

float geometry(float NdotV, float NdotL, float r2) {
    float a1 = r2 + 1.0;
    float k = a1 * a1 / 8.0;
    float denom = NdotV * (1.0 - k) + k;
    float ggx1 = NdotV / denom;
    denom = NdotL * (1.0 - k) + k;
    float ggx2 = NdotL / denom;
    return ggx1 * ggx2;
}

vec3 fresnel(float HdotV, vec3 fresnel_base) {
    return fresnel_base + (1.0 - fresnel_base) * pow(1.0 - HdotV, 5.0);
}

vec3 compute_light(vec3 attenuation,
                   vec3 light_color,
                   vec3 view_direction,
                   vec3 light_direction,
                   vec3 albedo,
                   vec3 normal,
                   float roughness2,
                   float metallic,
                   vec3 fresnel_base) {

    vec3 halfway = normalize(view_direction + light_direction);
    float normal_distribution = normal_distribution(normal, halfway, roughness2);

    float NdotV = max(dot(normal, view_direction), 0.0);
    float NdotL = max(dot(normal, light_direction), 0.0);
    float HdotV = max(dot(halfway, view_direction), 0.0);
    float geometry = geometry(NdotV, NdotL, roughness2);

    vec3 fresnel = fresnel(HdotV, fresnel_base);
    vec3 diffuse = vec3(1.0) - fresnel;
    diffuse *= 1.0 - metallic;

    vec3 nominator = normal_distribution * geometry * fresnel;
    float denominator = 4 * NdotV * NdotL + 0.0001;
    vec3 specular = nominator / denominator;

    vec3 resulting_light = (diffuse * albedo / PI + specular) * light_color * attenuation * NdotL;
    return resulting_light;
}

void main()
{
    bool normals = true;
    vec4 albedo_alpha       = texture(albedo, vertex.tex_coord);

    float alpha             = albedo_alpha.a;
    // if(alpha < 1.0) discard;

    vec3 albedo             = albedo_alpha.rgb;

    //vec4 color = vec4(mix(0.0, 1.0, tileScale / 1000.0), mix(1.0, 0.0, tileScale / 1000.0), 0.0, 1.0);
    // vec3 normal = texture(normal, gs.tex_coord).rgb;
    vec3 normal = texture(normal, vertex.tex_coord).rgb;
    float metallic = 0.;
    float roughness = 1.;

    normal = normal * 2. - 1.;

    float roughness2 = 1.;
    vec3 fresnel_base = mix(vec3(0.04), albedo, 0.);

    vec3 vertex_normal = normalize(vertex.normal);
    vec3 vertex_tangent = normalize(vec3(0.0, 0.0, 1.0));
    vec3 vertex_bitangent = normalize(cross(vertex_normal, vertex_tangent));
    mat3 vertex_basis = mat3(vertex_tangent, vertex_bitangent, vertex_normal);
    normal = normalize(vertex_basis * normal);


    vec3 view_direction = normalize(camera_position - vertex.position);

    vec3 lighting = vec3(0.0);
    // for (uint i = 0u; i < point_light_count; i++) {
    //     vec3 light_direction = normalize(plight[i].position - gs.position);
    //     float attenuation = plight[i].intensity / dot(light_direction, light_direction);

    //     vec3 light = compute_light(vec3(attenuation),
    //                                plight[i].color,
    //                                view_direction,
    //                                light_direction,
    //                                albedo,
    //                                normal,
    //                                roughness2,
    //                                metallic,
    //                                fresnel_base);


    //     lighting += light;
    // }

    for (uint i = 0u; i < directional_light_count; i++) {
        vec3 light_direction = -normalize(dlight[i].direction);
        float attenuation = 1.0;

        vec3 light = compute_light(vec3(attenuation),
                                   dlight[i].color,
                                   view_direction,
                                   light_direction,
                                   albedo,
                                   normal,
                                   roughness2,
                                   metallic,
                                   fresnel_base);
        lighting += light;
    }

    // for (int i = 0; i < spot_light_count; i++) {
    //     vec3 light_vec = slight[i].position - gs.position;
    //     vec3 normalized_light_vec = normalize(light_vec);

    //     // The distance between the current fragment and the \"core\" of the light
    //     float light_length = length(light_vec);

    //     // The allowed \"length\", everything after this won't be lit.
    //     // Later on we are dividing by this range, so it can't be 0
    //     float range = max(slight[i].range, 0.00001);

    //     // get normalized range, so everything 0..1 could be lit, everything else can't.
    //     float normalized_range = light_length / max(0.00001, range);

    //     // The attenuation for the \"range\". If we would only consider this, we'd have a
    //     // point light instead, so we need to also check for the spot angle and direction.
    //     float range_attenuation = max(0.0, 1.0 - normalized_range);

    //     // this is actually the cosine of the angle, so it can be compared with the
    //     // \"dotted\" frag_angle below a lot cheaper.
    //     float spot_angle = max(slight[i].angle, 0.00001);
    //     vec3 spot_direction = normalize(slight[i].direction);
    //     float smoothness = 1.0 - slight[i].smoothness;

    //     // Here we check if the current fragment is within the \"ring\" of the spotlight.
    //     float frag_angle = dot(spot_direction, -normalized_light_vec);

    //     // so that the ring_attenuation won't be > 1
    //     frag_angle = max(frag_angle, spot_angle);

    //     // How much is this outside of the ring? (let's call it \"rim\")
    //     // Also smooth this out.
    //     float rim_attenuation = pow(max((1.0 - frag_angle) / (1.0 - spot_angle), 0.00001), smoothness);

    //     // How much is this inside the \"ring\"?
    //     float ring_attenuation = 1.0 - rim_attenuation;

    //     // combine the attenuations and intensity
    //     float attenuation = range_attenuation * ring_attenuation * slight[i].intensity;

    //     vec3 light = compute_light(vec3(attenuation),
    //                                slight[i].color,
    //                                view_direction,
    //                                normalize(light_vec),
    //                                albedo,
    //                                normal,
    //                                roughness2,
    //                                metallic,
    //                                fresnel_base);
    //     lighting += light;
    // }



    vec3 ambient = ambient_color * albedo;
    vec3 color = ambient + lighting;

    // if (wireframe){
        // Wireframe junk
        float d = min(edge_dist.x, edge_dist.y);
        d = min(d, edge_dist.z);

        float LineWidth = 0.75;
        float mixVal = smoothstep(LineWidth - 1, LineWidth + 1, d);

        fragColor = mix(vertex.color, vec4(color, 1.0), mixVal);
    // } else {
    //     if (normals) {
    //         fragColor = mix(vertex.color, vec4(color, 1.0), 1.0);
    //     }else {
    //         fragColor = vec4(color, 1.0);
    //     }
    // }
}"
               OpSourceExtension "GL_GOOGLE_cpp_style_line_directive"
               OpSourceExtension "GL_GOOGLE_include_directive"
               OpName %main "main"
               OpName %albedo "albedo"
               OpName %VertexData "VertexData"
               OpMemberName %VertexData 0 "position"
               OpMemberName %VertexData 1 "normal"
               OpMemberName %VertexData 2 "tex_coord"
               OpMemberName %VertexData 3 "color"
               OpName %vertex "vertex"
               OpName %normal "normal"
               OpName %Environment "Environment"
               OpMemberName %Environment 0 "ambient_color"
               OpMemberName %Environment 1 "camera_position"
               OpMemberName %Environment 2 "point_light_count"
               OpMemberName %Environment 3 "directional_light_count"
               OpMemberName %Environment 4 "spot_light_count"
               OpName %_ ""
               OpName %DirectionalLight "DirectionalLight"
               OpMemberName %DirectionalLight 0 "color"
               OpMemberName %DirectionalLight 1 "intensity"
               OpMemberName %DirectionalLight 2 "direction"
               OpName %DirectionalLights "DirectionalLights"
               OpMemberName %DirectionalLights 0 "dlight"
               OpName %__0 ""
               OpName %edge_dist "edge_dist"
               OpName %fragColor "fragColor"
               OpDecorate %albedo DescriptorSet 1
               OpDecorate %albedo Binding 3
               OpDecorate %VertexData Block
               OpDecorate %vertex Location 0
               OpDecorate %normal DescriptorSet 1
               OpDecorate %normal Binding 2
               OpMemberDecorate %Environment 0 Offset 0
               OpMemberDecorate %Environment 1 Offset 16
               OpMemberDecorate %Environment 2 Offset 28
               OpMemberDecorate %Environment 3 Offset 32
               OpMemberDecorate %Environment 4 Offset 36
               OpDecorate %Environment Block
               OpDecorate %_ DescriptorSet 0
               OpDecorate %_ Binding 1
               OpMemberDecorate %DirectionalLight 0 Offset 0
               OpMemberDecorate %DirectionalLight 1 Offset 12
               OpMemberDecorate %DirectionalLight 2 Offset 16
               OpDecorate %_arr_DirectionalLight_uint_16 ArrayStride 32
               OpMemberDecorate %DirectionalLights 0 Offset 0
               OpDecorate %DirectionalLights Block
               OpDecorate %__0 DescriptorSet 0
               OpDecorate %__0 Binding 3
               OpDecorate %edge_dist NoPerspective
               OpDecorate %edge_dist Location 4
               OpDecorate %fragColor Location 0
       %void = OpTypeVoid
          %4 = OpTypeFunction %void
      %float = OpTypeFloat 32
    %v3float = OpTypeVector %float 3
    %float_0 = OpConstant %float 0
    %float_1 = OpConstant %float 1
    %float_5 = OpConstant %float 5
        %163 = OpConstantComposite %v3float %float_1 %float_1 %float_1
    %float_4 = OpConstant %float 4
%float_9_99999975en05 = OpConstant %float 9.99999975e-05
       %bool = OpTypeBool
    %v4float = OpTypeVector %float 4
        %213 = OpTypeImage %float 2D 0 0 0 1 Unknown
        %214 = OpTypeSampledImage %213
%_ptr_UniformConstant_214 = OpTypePointer UniformConstant %214
     %albedo = OpVariable %_ptr_UniformConstant_214 UniformConstant
    %v2float = OpTypeVector %float 2
 %VertexData = OpTypeStruct %v3float %v3float %v2float %v4float
%_ptr_Input_VertexData = OpTypePointer Input %VertexData
     %vertex = OpVariable %_ptr_Input_VertexData Input
        %int = OpTypeInt 32 1
      %int_2 = OpConstant %int 2
%_ptr_Input_v2float = OpTypePointer Input %v2float
       %uint = OpTypeInt 32 0
     %normal = OpVariable %_ptr_UniformConstant_214 UniformConstant
    %float_2 = OpConstant %float 2
%float_0_0399999991 = OpConstant %float 0.0399999991
        %253 = OpConstantComposite %v3float %float_0_0399999991 %float_0_0399999991 %float_0_0399999991
      %int_1 = OpConstant %int 1
%_ptr_Input_v3float = OpTypePointer Input %v3float
        %264 = OpConstantComposite %v3float %float_0 %float_0 %float_1
%mat3v3float = OpTypeMatrix %v3float 3
%Environment = OpTypeStruct %v3float %v3float %int %int %int
%_ptr_Uniform_Environment = OpTypePointer Uniform %Environment
          %_ = OpVariable %_ptr_Uniform_Environment Uniform
%_ptr_Uniform_v3float = OpTypePointer Uniform %v3float
      %int_0 = OpConstant %int 0
        %306 = OpConstantComposite %v3float %float_0 %float_0 %float_0
     %uint_0 = OpConstant %uint 0
      %int_3 = OpConstant %int 3
%_ptr_Uniform_int = OpTypePointer Uniform %int
%DirectionalLight = OpTypeStruct %v3float %float %v3float
    %uint_16 = OpConstant %uint 16
%_arr_DirectionalLight_uint_16 = OpTypeArray %DirectionalLight %uint_16
%DirectionalLights = OpTypeStruct %_arr_DirectionalLight_uint_16
%_ptr_Uniform_DirectionalLights = OpTypePointer Uniform %DirectionalLights
        %__0 = OpVariable %_ptr_Uniform_DirectionalLights Uniform
  %edge_dist = OpVariable %_ptr_Input_v3float Input
%_ptr_Input_float = OpTypePointer Input %float
     %uint_1 = OpConstant %uint 1
     %uint_2 = OpConstant %uint 2
%_ptr_Output_v4float = OpTypePointer Output %v4float
  %fragColor = OpVariable %_ptr_Output_v4float Output
%_ptr_Input_v4float = OpTypePointer Input %v4float
  %float_0_5 = OpConstant %float 0.5
%float_n0_25 = OpConstant %float -0.25
 %float_1_75 = OpConstant %float 1.75
%float_0_318309903 = OpConstant %float 0.318309903
%float_0_959999979 = OpConstant %float 0.959999979
        %587 = OpConstantComposite %v3float %float_0_959999979 %float_0_959999979 %float_0_959999979
%float_0_318309873 = OpConstant %float 0.318309873
        %589 = OpConstantComposite %v3float %float_0_318309873 %float_0_318309873 %float_0_318309873
       %main = OpFunction %void None %4
          %6 = OpLabel
               OpLine %1 152 0
        %217 = OpLoad %214 %albedo
        %225 = OpAccessChain %_ptr_Input_v2float %vertex %int_2
        %226 = OpLoad %v2float %225
        %227 = OpImageSampleImplicitLod %v4float %217 %226
        %235 = OpVectorShuffle %v3float %227 %227 0 1 2
               OpLine %1 161 0
        %238 = OpLoad %214 %normal
        %241 = OpImageSampleImplicitLod %v4float %238 %226
        %242 = OpVectorShuffle %v3float %241 %241 0 1 2
        %247 = OpVectorTimesScalar %v3float %242 %float_2
        %249 = OpFSub %v3float %247 %163
               OpLine %1 170 0
        %260 = OpAccessChain %_ptr_Input_v3float %vertex %int_1
        %261 = OpLoad %v3float %260
        %262 = OpExtInst %v3float %2 Normalize %261
        %268 = OpExtInst %v3float %2 Cross %262 %264
        %269 = OpExtInst %v3float %2 Normalize %268
        %288 = OpCompositeConstruct %mat3v3float %264 %269 %262
        %291 = OpMatrixTimesVector %v3float %288 %249
        %292 = OpExtInst %v3float %2 Normalize %291
               OpLine %1 177 0
        %298 = OpAccessChain %_ptr_Uniform_v3float %_ %int_1
        %299 = OpLoad %v3float %298
        %301 = OpAccessChain %_ptr_Input_v3float %vertex %int_0
        %302 = OpLoad %v3float %301
        %303 = OpFSub %v3float %299 %302
        %304 = OpExtInst %v3float %2 Normalize %303
               OpBranch %310
        %310 = OpLabel
        %579 = OpPhi %v3float %306 %6 %360 %311
        %578 = OpPhi %uint %uint_0 %6 %362 %311
        %318 = OpAccessChain %_ptr_Uniform_int %_ %int_3
        %319 = OpLoad %int %318
        %320 = OpBitcast %uint %319
        %321 = OpULessThan %bool %578 %320
               OpLoopMerge %312 %311 None
               OpBranchConditional %321 %311 %312
        %311 = OpLabel
        %330 = OpAccessChain %_ptr_Uniform_v3float %__0 %int_0 %578 %int_2
        %331 = OpLoad %v3float %330
        %332 = OpExtInst %v3float %2 Normalize %331
        %333 = OpFNegate %v3float %332
        %341 = OpAccessChain %_ptr_Uniform_v3float %__0 %int_0 %578 %int_0
        %342 = OpLoad %v3float %341
        %448 = OpFAdd %v3float %304 %333
        %449 = OpExtInst %v3float %2 Normalize %448
        %456 = OpDot %float %292 %304
        %457 = OpExtInst %float %2 FMax %456 %float_0
        %460 = OpDot %float %292 %333
        %461 = OpExtInst %float %2 FMax %460 %float_0
        %464 = OpDot %float %449 %304
        %465 = OpExtInst %float %2 FMax %464 %float_0
        %550 = OpFMul %float %457 %float_0_5
        %552 = OpFAdd %float %550 %float_0_5
        %555 = OpFDiv %float %457 %552
        %559 = OpFMul %float %461 %float_0_5
        %561 = OpFAdd %float %559 %float_0_5
        %564 = OpFDiv %float %461 %561
        %567 = OpFMul %float %555 %564
        %574 = OpFSub %float %float_1 %465
        %575 = OpExtInst %float %2 Pow %574 %float_5
        %576 = OpVectorTimesScalar %v3float %587 %575
        %577 = OpFAdd %v3float %253 %576
        %474 = OpFSub %v3float %587 %576
        %478 = OpVectorTimesScalar %v3float %474 %float_1
        %481 = OpFMul %float %float_0_318309903 %567
        %483 = OpVectorTimesScalar %v3float %577 %481
        %485 = OpFMul %float %float_4 %457
        %487 = OpFMul %float %485 %461
        %488 = OpFAdd %float %487 %float_9_99999975en05
        %491 = OpCompositeConstruct %v3float %488 %488 %488
        %492 = OpFDiv %v3float %483 %491
        %495 = OpFMul %v3float %478 %235
        %497 = OpFMul %v3float %495 %589
        %499 = OpFAdd %v3float %497 %492
        %501 = OpFMul %v3float %499 %342
        %505 = OpVectorTimesScalar %v3float %501 %461
        %360 = OpFAdd %v3float %579 %505
        %362 = OpIAdd %uint %578 %int_1
               OpBranch %310
        %312 = OpLabel
               OpLine %1 268 0
        %364 = OpAccessChain %_ptr_Uniform_v3float %_ %int_0
        %365 = OpLoad %v3float %364
        %367 = OpFMul %v3float %365 %235
        %371 = OpFAdd %v3float %367 %579
               OpLine %1 273 0
        %375 = OpAccessChain %_ptr_Input_float %edge_dist %uint_0
        %376 = OpLoad %float %375
        %378 = OpAccessChain %_ptr_Input_float %edge_dist %uint_1
        %379 = OpLoad %float %378
        %380 = OpExtInst %float %2 FMin %376 %379
        %383 = OpAccessChain %_ptr_Input_float %edge_dist %uint_2
        %384 = OpLoad %float %383
        %385 = OpExtInst %float %2 FMin %380 %384
        %394 = OpExtInst %float %2 SmoothStep %float_n0_25 %float_1_75 %385
               OpLine %1 279 0
        %398 = OpAccessChain %_ptr_Input_v4float %vertex %int_3
        %399 = OpLoad %v4float %398
        %401 = OpCompositeExtract %float %371 0
        %402 = OpCompositeExtract %float %371 1
        %403 = OpCompositeExtract %float %371 2
        %404 = OpCompositeConstruct %v4float %401 %402 %403 %float_1
        %406 = OpCompositeConstruct %v4float %394 %394 %394 %394
        %407 = OpExtInst %v4float %2 FMix %399 %404 %406
               OpStore %fragColor %407
               OpReturn
               OpFunctionEnd
